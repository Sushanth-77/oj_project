
services:
  # Main Django application
  web:
    build: .
    ports:
      - "8000:8000"
    volumes:
      # Mount source code for development
      - .:/app
      # Separate volumes for persistent data
      - static_volume:/app/static
      - media_volume:/app/media
      # Mount test case files as read-only
      - ./inputs:/app/inputs:ro
      - ./outputs:/app/outputs:ro
      # Writable temp directory for code execution
      - temp_volume:/app/temp
      - logs_volume:/app/logs
    environment:
      - DEBUG=1
      - SECRET_KEY=django-insecure-5v=pi38z*mjkv8xn#b!e6gt1)=46qdw2&8_@^@87(c)wdhmdj3
      - DATABASE_URL=sqlite:///./db.sqlite3
      - GEMINI_API_KEY=AIzaSyDI4e9H_OchPocH22CQ-o6nCgPEdFvcZ1Q
      - PYTHONPATH=/app
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,web
      # Add logging configuration
      - DJANGO_LOG_LEVEL=INFO
    depends_on:
      - db
    networks:
      - oj_network
    restart: unless-stopped
    # Resource limits for security
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL Database (Optional - for production)
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=oj_project
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5432:5432"
    networks:
      - oj_network
    restart: unless-stopped
    # Add health check for database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and session storage (Optional but recommended)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - oj_network
    restart: unless-stopped
    # Add persistence for Redis
    volumes:
      - redis_data:/data
    # Redis configuration for better performance
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Nginx for production (Optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/app/static:ro
      - media_volume:/app/media:ro
      # Add SSL certificates volume if needed
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - oj_network
    profiles:
      - production
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  temp_volume:
    driver: local
  logs_volume:
    driver: local
  redis_data:
    driver: local

networks:
  oj_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16